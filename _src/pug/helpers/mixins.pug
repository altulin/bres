
mixin svg(name)
  //- - const sprite = `${baseDir}img/sprites.svg`
  - const sprite = `${baseDir}img/sprites.svg`
  svg&attributes(attributes)
    use(xlink:href= `${sprite}#${name}`)

//-  +svg('point')(class="fghfg")
//-  viewBox нужен для адаптивности


//- +img-retina('', '', '', '', '', '')
mixin img-retina(name, type, alt, className, width, height, ...args)
  - let srcsetAttr = attributes.lazy ? 'data-srcset' : 'srcset';
  - let srcAttr = attributes.lazy ? 'data-src' : 'src';
  - let sourceWebp = {};
  - let img = {};

  - sourceWebp[srcsetAttr] = `${baseDir}img/webp/${name}.webp 1x, ${baseDir}img/webp/${name}@2x.webp 2x`;
  - img.class = attributes.lazy ? `lazyload ${className}` : `${className}`;
  - img[srcAttr] = `${baseDir}img/${name}.${type}`;
  - img[srcsetAttr] = `${baseDir}img/${name}.${type} 1x, ${baseDir}img/${name}@2x.${type} 2x`;
  - img.alt = alt;
  - img.width = width;
  - img.height = height;

  picture
    if args.length > 0
      - let sourceArgsWebp = {};
      - let sourceArgs = {};


      each item in args
        - sourceArgsWebp[srcsetAttr] = `${baseDir}img/webp/${name}-${item}.webp 1x, ${baseDir}img/webp/${name}-${item}@2x.webp 2x`;
        - sourceArgs[srcsetAttr] = `${baseDir}img/${name}-${item}.${type} 1x, ${baseDir}img/${name}-${item}@2x.${type} 2x`;
        - let media = `(max-width: ${item}px)`

        source(media = `${media}` type="image/webp")&attributes(sourceArgsWebp)
        source(media = `${media}` type= type==='jpg'?"image/jpeg":`image/${type}`  )&attributes(sourceArgs)

    source(type="image/webp")&attributes(sourceWebp)
    img&attributes(img)



//- +img-svg('', '', '', '', '', '')
mixin img-svg(name, className, alt, width, height)
  img(class=`${className}` src=`${baseDir}img/svg/${name}.svg` alt=alt width=width height=height loading="lazy")

mixin date(name, label)
  label.filter__label(for=`date_${name}`) 
    span.filter__title= `${label}:`
    .filter__datepicker.datepicker
      span.datepicker__calendar
        +svg('calendar')
      input.filter__input.datepicker__input(type="date" name=`${name}` value="" required placeholder="Выбрать..." id=`date_${name}`)
      button.datepicker__reset(type="button" aria-label="Сбросить дату" onclick=`document.getElementById('date_${name}').value = '';`) 
        +svg('close')

mixin cell(label, value, modifier)
  .content__cell.cell(class=`cell--${modifier}`) 
    span.cell__label= label
    span.cell__value(class=`cell__value--${modifier}`)= value

